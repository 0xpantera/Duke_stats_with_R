geom_histogram(binwidth = 1)
ggplot(data = kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
median(kobe_streak$length)
IQR(kobe_streak$length)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
```
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
table(sim_unfair_coin)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
table(sim_basket)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
sample(shot_outcomes, size=100, replace=TRUE)
table(sample(shot_outcomes, size=100, replace=TRUE))
?sample
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE, prob = c(0.45, 0.55))
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45, 0.55))
sim_streak <- calc_streak(sim_basket)
View(sim_streak)
View(sim_streak)
ggplot(data = sim_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
median(sim_streak)
median(sim_streak$length)
IQR(sim_streak$length)
View(kobe_streak)
library(statsr)
calc_streak
98/2
98.0/2
qnorm(0.049)
quit()
qnorm(0.049)
qnorm(0.01)
quit()
library(statsr)
library(dplyr)
library(ggplot2)
data(nc)
str(nc)
View(nc)
hist(nc$fage)
ggplot(nc, aes(x = c(fage, mage))) +
geom_boxplot()
ggplot(nc, aes(x = fage) + geom_boxplot()
)
ggplot(nc, aes(x = fage)) + geom_boxplot()
nc %>%
filter(!is.na(fage)) %>%
ggplot(nc, aes(fage)) +
geom_boxplot()
nc %>%
filter(!is.na(fage)) %>%
ggplot(nc, aes(x = fage)) +
geom_boxplot()
test <- nc %>%
filter(!is.na(fage))
ggplot(test, aes(x = fage)) +
geom_boxplot()
summary(nc$gained)
?n
nc %>%
filter(is.na(gained)) %>%
summarise(count = n())
nc[is.na(gained)]
nc[is.na(nc$gained)]
nc[nc == is.na(gained)]
nc[nc == is.na(nc$gained)]
summary(nc$gained)
ggplot(nc, aes(x = !is.na(gained))) +
geom_boxplot()
ggplot(nc, aes(x = gained)) +
geom_boxplot()
ggplot(nc, aes(x = gained)) +
geom_histogram()
ggplot(nc, aes(x = c(habit, weight))) +
geom_boxplot()
ggplot(nc, aes(x = habit, weight)) +
geom_boxplot()
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
nc %>%
group_by(habit) %>%
summarise(group_size = n())
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci", method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker","nonsmoker"))
?inference
method = "theoretical", order = c("smoker","nonsmoker"), conf_level = 0.95)
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker","nonsmoker"), conf_level = 0.95)
inference(y = weeks, data = nc, statistic = "mean", type = "ci", method = "theoretical", conf_level = 0.99)
inference(y = weeks, data = nc, statistic = "mean", type = "ci", method = "theoretical", conf_level = 0.90)
inference(y = weight, x = mature, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
View(nc)
inference(y = gained, x = mature, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
levels(nc$mature)
str(nc$mature)
nc %>%
group_by(mature) %>%
summarise(max_age = max(mage), min_age = min(mage))
add2 <- function(x, y) {
x + y
}
add2(2, 3)
bigger10 <- function(x) {
x[x >10]
}
bigger(test)
test <- c(5, 10, 15, 20)
bigger10(test)
bigger10 <- function(a, b) {
a[a > b]
}
bigger10(test, 5)
bigger <- function(x, n) {
# Returns a subset of the vector x whose elements are greater than n
x[x > n]
}
bigger10 <- function(x) {
# Returns a subset of the vector x whose elements are greater than 10
x[x > 10]
}
add2 <- function(x, y) {
# Returns sum of x and y
x + y
}
bigger <- function(x, n = 10) {
# Returns a subset of the vector x whose elements are greater than n (defaults to 10)
x[x > n]
}
x <- 1:20
bigger(x)
bigger(x, 15)
eachMean <- function(x) {
# Calculates the mean of each column of x
for(i in seq_along(x)) {
mean(x[,i])
}
}
mat <- matrix(1:6, 2, 3)
mat
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
for(i in seq_len(ncol(x))) {
mean(x[,i])
}
}
eachMean(mat)
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
for(i in seq_len(ncol(x))) {
mean(x[,i])
}
}
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
}
mat
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
eachMean(mat)
eachMean <- function(x, removeNA = TRUE) {
# Calculates the mean of each column of x
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
eachMean(airquality)
eachMean(airquality, removeNA = FALSE)
oldOne <- function(x) {
for(i in seq_along(ncol(x))) {
print(mean(x[, i]))
}
}
oldOne(mat)
oldOne <- function(x) {
for(i in seq_len(ncol(x))) {
print(mean(x[, i]))
}
}
oldOne(mat)
formals(bigger)
library(ggplot2)
library(dplyr)
library(corrplot)
library(caret)
n <- length(bank$age) * .30
?read.csv
planes <- read.csv("~/Documents/2000.csv", nrows = 10)
View(planes)
planes <- read.csv("~/Documents/2000.csv", nrows = 5000)
View(planes)
str(planes$UniqueCarrier)
levels(planes$UniqueCarrier)
install.packages("RHive")
library.packages("RJVC")
installed.packages("RJVC")
install.packages("RJVC")
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "/opt/mapr/hive/hive-0.13/lib/hive-jdbc-0.13.0-mapr-1410.jar")
cp = c("/usr/lib/hive/lib/hive-jdbc.jar", "/usr/lib/hadoop/client/hadoop-common.jar", "/usr/lib/hive/lib/libthrift-0.9.2.jar", "/usr/lib/hive/lib/hive-service.jar", "/usr/lib/hive/lib/httpclient-4.2.5.jar", "/usr/lib/hive/lib/httpcore-4.2.5.jar", "/usr/lib/hive/lib/hive-jdbc-standalone.jar")
.jinit(classpath=cp)
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "/usr/lib/hive/lib/hive-jdbc.jar", identifier.quote="`")
"/usr/hdp/current/hadoop-client/hadoop-common.jar")
cp = c("/usr/hdp/current/hive-client/lib/hive-jdbc.jar",
"/usr/hdp/current/hadoop-client/hadoop-common.jar")
.jinit(classpath=cp)
drv <- JDBC("org.apache.hive.jdbc.HiveDriver",
"/usr/hdp/current/hive-client/lib/hive-jdbc.jar",
identifier.quote="`")
?JDBC
hadoop.class.path = list.files(path=c("/usr/hdp/current/hadoop"),pattern="jar", full.names=T);
hive.class.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar", full.names=T);
hadoop.lib.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar",full.names=T);
mapred.class.path = list.files(path=c("/usr/hdp/current/hadoop-mapreduce-client/lib"),pattern="jar",full.names=T);
cp = c(hive.class.path,hadoop.lib.path,mapred.class.path,hadoop.class.path)
.jinit(classpath=cp,parameters="-Djavax.security.auth.useSubjectCredsOnly=false")
drv <- JDBC("org.apache.hive.jdbc.HiveDriver","hive-jdbc.jar",identifier.quote="`")
library(DBI)
library(rJava)
library(RJDBC)
hadoop.class.path = list.files(path=c("/usr/hdp/current/hadoop"),pattern="jar", full.names=T);
hive.class.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar", full.names=T);
hadoop.lib.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar",full.names=T);
mapred.class.path = list.files(path=c("/usr/hdp/current/hadoop-mapreduce-client/lib"),pattern="jar",full.names=T);
cp = c(hive.class.path,hadoop.lib.path,mapred.class.path,hadoop.class.path)
.jinit(classpath=cp,parameters="-Djavax.security.auth.useSubjectCredsOnly=false")
drv <- JDBC("org.apache.hive.jdbc.HiveDriver","hive-jdbc.jar",identifier.quote="`")
drv <- JDBC("org.apache.hadoop.hive.jdbc.HiveDriver")
evals %>% group_by(score) %>%
summarise(count = n())
library(dplyr)
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
data(evals)
ggplot(evals, aes(x = score)) +
geom_histogram() +
geom_vline(xintercept = median(evals$score), color = "red")
evals %>% group_by(score) %>%
summarise(count = n())
evals %>% filter(score < 3)
group_by(score) %>%
summarise(count = n())
evals %>%
group_by(score) %>%
summarise(count = n()) %>%
filter(score < 3)
evals %>%
group_by(score) %>%
summarise(count = n()) %>%
filter(score < 3) %>%
summarise(sum(count))
evals %>%
group_by(score) %>%
summarise(count = n()) %>%
filter(score < 3) %>%
summarise(scoresBelow0 = sum(count))
max(evals$score)
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
View(evals)
count(evals$bty_avg)
n(evals$bty_avg)
evals %>% group_by(bty_avg) %>% summarise(total = n())
?geom_jitter
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
m_bty <- lm(score ~ bty_avg, data = evals)
summary(m_bty)
plot(m_bty$residuals ~ evals$bty_avg)
plot(m_bty$residuals)
?abline
abline(h = 0)
abline(h = 0)
plot(m_bty$residuals ~ m_bty$fitted.values)
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
str(eval$gender)
str(evals$gender)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
plot(m_bty_gen$residuals ~ evals$bty_avg)
abline(h = 0)
plot(m_bty_gen$residuals ~ m_bty_gen$fitted.values)
plot(abs(m_bty_gen$residuals) ~ m_bty_gen$fitted.values)
plot(m_bty_gen$residuals)
abline(h = 0)
summary(m_bty_gen)
summary(m_bty)
summary(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
newprof <- data.frame(gender = "male", bty_avg = 3)
summary(m_bty_gen)
predict(m_bty_gen, newprof)
predict(m_bty_gen, newprof, interval = "prediction", level = 0.95)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_most <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
summary(m_most)
m1 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
summary(m_full)$adj.r.squared
m2 = lm(score ~ rank + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m2)$adj.r.squared
m3 = lm(score ~ ethnicity + rank + gender + language + age +
cls_students + cls_level + cls_profs + cls_credits, data = evals)
summary(m3)$adj.r.squared
m3 = lm(score ~ ethnicity + rank + gender + language + age +
cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m3)$adj.r.squared
m3 = lm(score ~ ethnicity + rank + gender + language + age + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m3)$adj.r.squared
m3 = lm(score ~ ethnicity + gender + language + age +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m3)$adj.r.squared
library(ggplot2)
library(dplyr)
library(statsr)
load("movies.Rdata")
setwd("~/Documents/Duke_stats_with_R/regression/final_project/")
load("movies.Rdata")
View(movies)
range(imdb_rating)
range(movies$imdb_rating)
range(movies$critics_score)
range(movies$audience_score)
100 / 10
str(movies)
?ggpairs
ggpairs(movies, columns = c("runtime", "thtr_rel_year"))
numerical_columns <- c("runtime", "thtr_rel_year", "thtr_rel_month", "thtr_rel_day", "dvd_rel_year",
"dvd_rel_month", "dvd_rel_day", "imdb_rating", "critics_score",
"audience_score")
ggpairs(movies, columns = numerical_columns)
numerical_columns <- c("runtime", "thtr_rel_year", "thtr_rel_month", "dvd_rel_year",
"dvd_rel_month", "imdb_rating", "critics_score",
"audience_score")
ggpairs(movies, columns = numerical_columns)
summary(movies)
summary(movies$director)
levels(movies$director)
class(movies$director)
str(movies)
range(movies$imdb_rating)
range(movies$critics_score)
range(movies$audience_score)
?mean
movies <- movies %>%
mutate(avg_score = ((imdb_rating * 10) + critics_score + audience_score)/3)
View(movies)
levels(studio)
levels(movies$studio)
str(movies)
drop_cols <- c("imdb_url", "rt_url", "actor1", "actor2", "actor3", "actor4", "actor5", "director", "studio")
movies %>% select(-one_of(drop_cols))
movies <- movies %>% select(-one_of(drop_cols))
View(movies)
library(GGally)
?ggpairs
ggpairs(movies, columns = numerical_columns, columnLabels = c("time", "thtr_yr", "thtr_mnth", "dvd_yr",
"dvd_mnth", "imdb", "critics", "audience"))
str(movies)
m1 <- lm(avg_score ~ title_type + runtime + thtr_rel_month + imdb_num_votes + critics_rating
+ audience_rating + best_pic_win + best_actor_win + best_actress_win + best_dir_win + top200_box,
data = movies)
summary(m1)
levels(title_type)
levels(movies$title_type)
m2 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating + best_pic_win + best_actor_win + best_actress_win + best_dir_win + top200_box,
data = movies)
summary(m2)
m3 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating + best_actor_win + best_actress_win + best_dir_win + top200_box,
data = movies)
summary(m3)
m4 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating + best_actor_win + best_actress_win + best_dir_win, data = movies)
summary(m4)
m5 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating + best_actor_win + best_dir_win, data = movies)
summary(m5)
m5 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating + best_dir_win, data = movies)
summary(m5)
m5 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating + best_actor_win + best_dir_win, data = movies)
summary(m5)
m6 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating + best_dir_win, data = movies)
summary(m6)
m7 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating, data = movies)
summary(m7)
plot(m7$residuals ~ movies$runtime)
plot(m7$residuals ~ movies$title_type)
plot(m7$residuals ~ movies$critics_rating)
length(m7$residuals)
length(movies$runtime)
plot(m7$residuals)
length(movies$title_type)
length(movies$runtime)
length(movies$imdb_num_votes)
length(movies$critics_rating)
length(movies$audience_rating
)
length(movies$avg_score)
m7 <- lm(avg_score ~ title_type + runtime + imdb_num_votes + critics_rating
+ audience_rating, data = movies)
summary(m7)
plot(m7$residuals ~ movies$critics_rating)
plot(m_bty_gen$residuals ~ m_bty_gen$fitted.values)
hist(m7$residuals)
qqnorm(m7$residuals)
qqline(m7$residuals)
plot(m7$residuals ~ m7$fitted.values)
plot(abs(m7$residuals) ~ m7$fitted.values)
plot(m7$residuals)
abline(h = 0)
hist(m7$residuals)
qqnorm(m7$residuals)
qqline(m7$residuals)
hist(m7$residuals)
plot(m7$residuals ~ m7$fitted.values)
plot(abs(m7$residuals) ~ m7$fitted.values)
plot(m7$residuals)
abline(h = 0)
View(as.data.frame(m7$residuals))
View(as.data.frame(movies$runtime))
plot(m7$residuals ~ movies$runtime)
plot(m7$residuals ~ movies$runtime[:650])
plot(m7$residuals ~ movies$runtime[0:650])
plot(m7$residuals ~ movies$runtime[0:])
plot(m7$residuals ~ movies$runtime[0:length(movies$runtime)])
movies %>% filter(title == "Deadpool") %>% summarise(count = n())
str(movies$title_type)
levels(movies$title_type)
str(movies$runtime)
new_movie <- data.frame(title_type = "Feature Film", runtime = 103, imdb_num_votes = 518821,
critics_rating = "Certified Fresh", audience_rating = "Upright")
predict(m7, newdata = new_movie)
summary(predict(m7, newdata = new_movie))
deadpool_real_rating <- ((8.1 * 10) + 90 + 84 / 3)
deadpool_real_rating <- (((8.1 * 10) + 90 + 84) / 3)
predicted_score <- predict(m7, newdata = new_movie)
predicted_score
deadpool_real_rating <- (((8.1 * 10) + 90 + 84) / 3)
deadpool_real_rating
differnce <- deadpool_real_rating - predicted_score
differnce
levels(movies$studio)
predict(m7, new_movie, interval = "prediction", level = 0.95)
summary(m7)
predict(m7, newdata = new_movie, type = 'terms')
knitr::opts_chunk$set(echo = TRUE)
